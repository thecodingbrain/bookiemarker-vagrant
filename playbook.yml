---
- name: Setup bookiemarker environment
  hosts: all
  vars:
    locale: en_US.UTF-8
    database_name: "bookiemarkerdb"
    database_user: "root"
    database_password: "root"
    database_host: localhost
    database_port: 7232
    rabbitmq_user: "user"
    rabbitmq_password: "password"
    rabbitmq_port: 7234
    rabbitmq_management_port: 7235
    rabbitmq_config_dir: "/etc/rabbitmq"
    codingbrain_dir: /home/codingbrain
    frontend_dir: /vagrant/frontend
    backend_dir: /vagrant/backend
    worker_dir: /vagrant/worker
    pg_version: 9.4
    pg_conf: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
    pg_hba: "/etc/postgresql/{{ pg_version}}/main/pg_hba.conf"
  
  become: True  
  tasks:
    # install packages
    - name: add rabbit mq apt repository
      apt_repository:
        repo: "deb http://www.rabbitmq.com/debian/ testing main"
        state: present
        filename: "rabbitmq.list"

    - name: add postges apt repository
      apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main"
        state: present
        filename: "pgdg.list"

    - name: add gradle 3.3 apt repository
      apt_repository:
        repo: "ppa:cwchien/gradle"
        state: present

    - name: add java 8 apt repository
      apt_repository:
        repo: "ppa:webupd8team/java"
        state: present

    - name: add python 3.6 apt repository
      apt_repository:
        repo: "ppa:jonathonf/python-3.6"
        state: present

    - name: add pgdg repo key
      apt_key:
        url: "https://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc"
        state: present
              
    - name: add rabbitmq key
      apt_key:
        url: "https://www.rabbitmq.com/rabbitmq-release-signing-key.asc"
        state: present
          
    - name: apt update & upgrade
      apt: 
        update_cache: yes 
        upgrade: yes

    - name: Automatically select the Oracle License
      shell: echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections

    - name: install apt packages
      apt: 
        pkg: "{{ item }}" 
      with_items:
        - nginx
        - postgresql-{{ pg_version }}
        - rabbitmq-server
        - python-psycopg2
        - erlang-nox
        - rabbitmq-server
        - git
        - python3.6
        - python3-pip
        - gradle-3.3
        - oracle-java8-installer
        - libxml2-dev 
        - libxslt1-dev
        - libjpeg-dev 
        - zlib1g-dev 
        - libpng12-dev        
        - python-dev
        - python3-lxml
        - python-numpy 
        
    # -- nginx     
    - name: set the nginx config file
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/sites-available/default
      notify: restart nginx

    - name: enable the nginx config file
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
      notify: restart nginx

    # -- postgres   
    - name: configure postgres listen to *
      lineinfile: 
        dest: "{{ pg_conf }}" 
        regexp: "#listen_addresses = 'localhost'"
        line: "listen_addresses = '*'"
      notify: restart postgresql
        
    - name: configure postgres port
      lineinfile: 
        dest: "{{ pg_conf }}" 
        regexp: "port = 5432"
        line: "port = {{ database_port }}"
      notify: restart postgresql
        
    - name: Append to pg_hba.conf to add password auth
      copy:
        dest: "{{ pg_hba }}"
        content: |
          host  all all all md5
      notify: restart postgresql
                          
    - name: create a user
      postgresql_user:
        name: "{{ database_user }}"
        password: "{{ database_password }}"
        state: present
      become_user: postgres
      
    - name: create the database
      postgresql_db:
        name: "{{ database_name }}"
        owner: "{{ database_user }}"
        encoding: UTF8
        lc_ctype: "{{ locale }}"
        lc_collate: "{{ locale }}"
        template: template0
      become_user: postgres

    # -- rabbitmq     
    - name: add rabbitmq user
      rabbitmq_user:
        user: "{{ rabbitmq_user }}"
        password: "{{ rabbitmq_password }}"
        permissions:
          - vhost: /
            configure_priv: .*
            read_priv: .*
            write_priv: .*
        state: present
        
    - name: configure rabbitmq
      template:
        src: templates/rabbitmq.config.j2
        dest: "{{ rabbitmq_config_dir}}/rabbitmq.config"
      notify: restart rabbitmq
        
    # Python
    # Codingbrain app
    - name: codingbraintutor - create codingbrain dir
      file:
        path: "{{ codingbrain_dir }}"
        group: vagrant
        owner: vagrant
        state: directory
    
    - name: codingbraintutor - clone git repo
      git:
          repo: https://BernhardWenzel@bitbucket.org/BernhardWenzel/codingbrain-bookiemarker.git
          dest: "{{ codingbrain_dir }}"
      become_user: vagrant
          
    - name: codingbraintutor - install requirements
      shell: pip3 install -r requirements.txt
      args:
        chdir: "{{ codingbrain_dir }}" 
      
    - name: codingbraintutor - install gunicorn
      shell: pip3 install gunicorn
      args:
        chdir: "{{ codingbrain_dir }}" 

    - name: codingbraintutor - migrate codingbrain app
      shell: python3 manage.py migrate
      args:
          chdir: "{{ codingbrain_dir }}"
      become_user: vagrant
      
    - name: codingbraintutor - setup gunicorn
      template:
        src: templates/codingbrain.conf.j2
        dest: /etc/init/codingbrain.conf
      notify: restart codingbrain

    - name: backend - install backend service
      template:
        src: templates/backend.conf.j2
        dest: /etc/init/backend.conf

    - name: worker - install service
      template:
        src: templates/worker.conf.j2
        dest: /etc/init/worker.conf
      
    - name: worker - install requirements
      shell: pip3 install -r worker-requirements.txt
      args:
        chdir: "/vagrant/files" 

    - name: worker - download nlp corpora script
      get_url: 
          url: https://raw.githubusercontent.com/codelucas/newspaper/master/download_corpora.py
          dest: "{{ codingbrain_dir }}"
      
    - name: worker - download nlp corpora
      shell: python3 download_corpora.py
      args:
          chdir: "{{ codingbrain_dir }}"
            
    - name: clone backend soure to install maven dependencies
      git:
        repo: https://github.com/thecodingbrain/bookiemarker-backend.git
        dest: "{{ backend_dir }}"
        force: yes
        
    - name: start backend and install dependencies
      shell: gradle compileJava 
      args: 
        chdir: "{{ backend_dir }}"

  handlers:
    - name: restart nginx
      service: name=nginx state=restarted
      
    - name: restart postgresql
      service: name=postgresql state=restarted
      
    - name: restart rabbitmq
      service: name=rabbitmq-server state=restarted
        
    - name: restart codingbrain
      service: name=codingbrain state=started
